import streamlit as st
import sqlite3
import json
import re
import random
from datetime import datetime
from textwrap import dedent

# ============ ุฅุนุฏุงุฏุงุช ุฃุณุงุณูุฉ ============
st.set_page_config(
    page_title="ุงูุจูุช ุงูุดุงุจ โ ุฏุฑุฏุดุฉ ุณุชุงูู ูุงุชุณุงุจ",
    page_icon="๐ฌ",
    layout="centered",
    initial_sidebar_state="collapsed",
)

# ============ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญูููุฉ (SQLite) ============
@st.cache_resource
def get_db():
    conn = sqlite3.connect("chat.db", check_same_thread=False)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS messages(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            role TEXT,            -- user / bot / system
            content TEXT,
            ts TEXT               -- ISO time
        )
    """)
    conn.commit()
    return conn

conn = get_db()

def db_add(role, content):
    conn.execute("INSERT INTO messages(role, content, ts) VALUES(?,?,?)",
                 (role, content, datetime.now().isoformat(timespec="seconds")))
    conn.commit()

def db_all():
    cur = conn.execute("SELECT role, content, ts FROM messages ORDER BY id ASC")
    return cur.fetchall()

def db_clear():
    conn.execute("DELETE FROM messages")
    conn.commit()

# ============ ุซูู & CSS ============

THEMES = {
    "ูุงุชุณุงุจ": {
        "bg": "linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%)",
        "bubble_user": "#d4f8c2",
        "bubble_bot": "#eaf2ff",
        "text": "#0b1b22",
        "accent": "#25D366",
        "chip": "#ffffffcc",
        "chip_text": "#0b1b22",
    },
    "ุบุงูู ุฃููู": {
        "bg": "linear-gradient(135deg,#141e30,#243b55)",
        "bubble_user": "#273c3f",
        "bubble_bot": "#2b2f3a",
        "text": "#e8eef2",
        "accent": "#7bd389",
        "chip": "#3a4052",
        "chip_text": "#e8eef2",
    },
    "ูุงุชุญ ูุฑุญ": {
        "bg": "linear-gradient(135deg,#f9f9fb,#e6f0ff)",
        "bubble_user": "#eaffea",
        "bubble_bot": "#ffffff",
        "text": "#1c2b3a",
        "accent": "#5b8def",
        "chip": "#f0f4ff",
        "chip_text": "#1c2b3a",
    },
}

def inject_css(theme_name):
    th = THEMES[theme_name]
    css = f"""
    <style>
      html, body, [data-testid="stAppViewContainer"] {{
        background: {th['bg']} !important;
        color: {th['text']} !important;
      }}
      .title-hero {{
        text-align:center; margin-top:8px; margin-bottom:6px;
      }}
      .subtitle {{
        text-align:center; opacity:.92; margin:-2px 0 18px 0;
      }}
      .bubble {{
        max-width: 92%;
        padding: 12px 14px;
        border-radius: 16px;
        margin: 6px 0 2px 0;
        line-height: 1.55;
        word-wrap: break-word;
        box-shadow: 0 2px 10px rgba(0,0,0,.08);
        border: 1px solid rgba(255,255,255,.09);
      }}
      .user {{ background:{th['bubble_user']}; margin-left:auto; }}
      .bot  {{ background:{th['bubble_bot']}; margin-right:auto; }}
      .meta {{ font-size:12px; opacity:.7; margin:0 4px; }}
      .row {{ display:flex; align-items:flex-end; gap:8px; }}
      .avatar {{
        width:34px; height:34px; border-radius:50%;
        background:#fff3; box-shadow:0 2px 6px #0003;
        display:flex; align-items:center; justify-content:center;
        font-size:18px;
      }}
      .chip {{
        display:inline-block; padding:8px 10px; margin:6px 8px 0 0;
        border-radius:999px; cursor:pointer; user-select:none;
        background:{th['chip']}; color:{th['chip_text']};
        border:1px solid #ffffff30;
        transition: all .15s ease;
        font-size:13.5px;
      }}
      .chip:hover {{ transform: translateY(-1px); box-shadow:0 3px 10px #0002; }}
      .chips-wrap {{
        display:flex; flex-wrap:wrap; align-items:center;
        margin:2px 0 10px 0;
      }}
      .tools {{
        display:flex; gap:6px; flex-wrap:wrap; margin:8px 0 4px 0;
      }}
      .btn {{
        border:none; border-radius:10px; padding:8px 10px;
        background:{th['accent']}; color:#071b12; font-weight:600;
        box-shadow:0 2px 10px rgba(0,0,0,.15); cursor:pointer;
      }}
      .searchbox input {{
        border-radius:10px !important; border:1px solid #ffffff40 !important;
      }}
      .footer-note {{ text-align:center; opacity:.6; font-size:12px; margin-top:10px; }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

# ============ ุงูุชุฑุงุญุงุช ุฌุงูุฒุฉ (50+) ============
SUGGESTIONS = [
    "ุงุนุทูู ุฎุทุฉ ุฏุฑุงุณุฉ ุฃุณุจูุนูุฉ",
    "ุฎุทุฉ ููุชุญุถูุฑ ููุจูุงููุฑูุง/ุงูุซุงูููุฉ",
    "ุฎุทูุฉ ุตุจุงุญูุฉ ูููุงูุฉ ูุงูุตุญุฉ",
    "ุงููุงุฑ ูุดุฑูุน ุตุบูุฑ ุจุฑุฃุณ ูุงู ูููู",
    "ููู ูุฒูุฏ ุงูุฅูุชุงุฌูุฉ ููุฑูุฒ ุฃูุซุฑุ",
    "ุฌุฏูู ูุฐุงูุฑุฉ ูุน ูุชุฑุงุช ุฑุงุญุฉ",
    "ููู ูุชุนูู ูุบุฉ ุฅูุฌููุฒูุฉ ุจุณุฑุนุฉุ",
    "ุฃูุถู ุนุงุฏุงุช ูุจู ุงูููู",
    "ูุตุงุฆุญ ูุฅุฏุงุฑุฉ ุงูููุช ูู ุงูุฌุงูุนุฉ",
    "ุทุฑููุฉ ุจุณูุทุฉ ูุชุนููู ุงูุจุฑูุฌุฉ",
    "ููู ูุทูู ูุชุฌุฑ ุฅููุชุฑููู ุตุบูุฑุ",
    "ุงูุชุฑุงุญุงุช ูุญุชูู ูุชูู ุชูู/ุฑูููุฒ",
    "ุนูุงููู ุฌุฐุงุจุฉ ูููุฏูู ููุชููุจ",
    "ููู ููุงุฌู ุงูุชุณูููุ",
    "ุทุฑููุฉ ุนูู CV ููุชุงุฒ",
    "ูููุฐุฌ ุฑุณุงูุฉ ุจุฑูุฏ ุงุญุชุฑุงููุฉ",
    "ููุฎุต ูุชุงุจ (ุงุฎุชุฑ ูุชุงุจูุง ูุดููุฑูุง)",
    "ุฑูุชูู ุฃุณุจูุนู ููุชุทูุฑ ุงูุฐุงุชู",
    "ูุธุงู ุบุฐุงุฆู ูุจุณุท ูุตุญู",
    "ุชูุงุฑูู ููุฒููุฉ ุจุฏูู ุฃุฏูุงุช",
    "ุฃูุถู ูุตุงุฏุฑ ูุชุนูู ุจุงูุซูู",
    "ูุดุฑูุน ุชุฎุฑุฌ ุฃููุงุฑ ุนูููุฉ",
    "ุฃููุงุฑ ููุญุชูู ุงูุณุชุบุฑุงู",
    "ูุงุฆูุฉ ุฃูุฏุงู ุดูุฑูุฉ ุฐููุฉ",
    "ููู ููููุฑ ุงููุงู ููุทูุงุจุ",
    "ุฎุทูุงุช ูุชุญ ููุงุฉ ููุชููุจ ูุงุฌุญุฉ",
    "ููู ูุชุบูุจ ุนูู ุงูููู ูุจู ุงูุงูุชุญุงูุ",
    "ุทุฑู ูุนุงูุฉ ููุญูุธ ุงูุณุฑูุน",
    "ุฃููุงุฑ ุชุทุจูู ุจุณูุท ุจุงูููุจุงูู",
    "ููู ูุจุฏุฃ ูุฑููุงูุณููุบุ",
    "ุงุณุชุฑุงุชูุฌูุฉ ุชุนููู ูู ุงูุตูุฑ ูุฃู ูุฌุงู",
    "ูุงุฆูุฉ ูุชุจ ูู ุชุทููุฑ ุงูุฐุงุช",
    "ุงุณูุน ููุชุฉ ุฎูููุฉ ๐",
    "ุงุญูู ูู ุญููุฉ ุงูููู ๐",
    "ุฃูุบุงุฒ ุณููุฉ ูุน ุงูุญู",
    "ููููุงุช ุชุญููุฒูุฉ",
    "ููู ุฃุญุณู ุฎุทูู ูู ุงููุชุงุจุฉุ",
    "ูุฐูุฑุงุช ููููุฉ: ูููุฐุฌ ุจุณูุท",
    "ูุงุฆูุฉ ููุงู ุฃุณุจูุนูุฉ",
    "ุงููุงุฑ ุตูุฑ ูููุดูุฑุงุช",
    "ููู ุฃุชุนุงูู ูุน ุงูุถุบุท ุงูููุณูุ",
    "ุฃูุถู ุทุฑููุฉ ูุชูุฎูุต ุงูุฏุฑูุณ",
    "ููุงุนุฏ ุฐูุจูุฉ ููุชููู",
    "ูู ููููู ุงุฎุชุจุงุฑ ูุนูููุงุชูุ",
    "ุงุฎุชุจุฑูู ููุฑุฏุงุช ุฅูุฌููุฒูุฉ",
    "ุชุนูููุงุช ุงูุณูุงูุฉ ุงูุฑูููุฉ",
    "ููู ุฃูุธูู ูููุงุชู ูุฌูุงุฒูุ",
    "ุฃูุนุงุจ ุฐูููุฉ ุณุฑูุนุฉ",
    "ุฎุทุฉ ุชุนูู Excel ูููุจุชุฏุฆูู",
    "ุฎุทุฉ ุชุนูู ุชุตููู (Canva)",
    "ูุตุงุฆุญ ูุจุฏุงูุฉ ูุดุฑูุน ุชุนูููู",
    "ูุงุฆูุฉ ูุดุงุฑูุน ุจุฑูุฌูุฉ ุจุณูุทุฉ",
    "ููููุฉ ุจูุงุก ุนุงุฏุฉ ุฌุฏูุฏุฉ",
]

# ============ ุฐูุงุก ูุญูู (ุจุฏูู API) ============
FAQ = {
    r"(ุณูุงู|ูุฑุญุจุง|ุงููุง)": "ูุฑุญุจุง ุจูู! ุดูู ุญุงุจ ุฏูุฑ ุงููููุ ููุฏุฑ ูุนุงููู ุจุฎุทุฉุ ูุตูุญุฉุ ุฃู ุญุชู ููุชุฉ ๐",
    r"(ุฎุทุฉ|plan).*ุฏุฑุงุณุฉ": "ูุฐู ุฎุทุฉ ุณุฑูุนุฉ: ูููููุง 45 ุฏูููุฉ ุฏุฑุงุณุฉ + 15 ูุฑุงุฌุนุฉุ ูุฎุฑูุฌ ุชูุฎูุต ุฃุณุจูุนู. ุญุฏุฏ 3 ููุงุฏ ุฃุณุงุณูุฉ ูุงุจุฏุฃ ุจุฃุตุนุจ ูุญุฏุฉ.",
    r"(ูุดุฑูุน|ุจูุฒูุณ|ูุชุฌุฑ)": "ุงููุงุฑ ุณุฑูุนุฉ: ุฏุฑูุจุดูุจููุบ ุจุณูุทุ ุจูุน ุฎุฏูุงุช ุฑูููุฉ (ุชุตููู/ูุชุงุจุฉ)ุ ุฏุฑูุณ ุฎุตูุตูุฉ ุฃูููุงููุ ุฃู ุฅุฏุงุฑุฉ ุญุณุงุจุงุช ุณูุดูุงู.",
    r"(ุงูุฌููุฒ|english|ุชุนูู ูุบุฉ)": "ุงุจุฏุฃ ุจู 20 ูููุฉ/ูููุ ุดุงูุฏ ููุฏูููุงุช ูุตูุฑุฉ ุจุชุฑุฌูุฉุ ููููุฏ ุงููุทู. ุงุณุชุนูู ูุจุฏุฃ ุงูู Spaced Repetition.",
    r"(ุชุฑููุฒ|ุฅูุชุงุฌูุฉ|ุชุณููู)": "ูุณูู ููุชู ุฅูู ุฌูุณุงุช 25 ุฏูููุฉ (Pomodoro) + 5 ุฑุงุญุฉ. ุงููู ุงูุฅุดุนุงุฑุงุช ูุญุฏุฏ ูุฏููุง ูุงุญุฏูุง ูุงุถุญูุง.",
    r"(ุฑุฌูู|ุบุฐุงุก|ุตุญู)": "ูุธุงู ุจุณูุท: 2 ูุชุฑ ูุงุกุ ุณูุฑ ุฃููุ ุจุฑูุชูู ูู ูู ูุฌุจุฉุ ููุดู 20โ30 ุฏูููุฉ ูููููุง.",
    r"(ุจุฑูุฌุฉ|ุจุงูุซูู|python)": "ุงุจุฏุฃ ุจู input/print/variables ุซู if/for/functions. ุทุจูู ุชูุงุฑูู ุตุบูุฑุฉ ูููููุง. ูุดุฑูุน ุจุณูุท ุฃูุถู ูู 100 ุฏุฑุณ!",
    r"(cv|ุณูุฑุฉ ุฐุงุชูุฉ)": "ุฎูููุง ุตูุญุฉ ูุงุญุฏุฉุ ุนููุงู ูุงุถุญุ ููุงุฑุงุช ูุงุจูุฉ ููููุงุณุ ูุฑูุงุจุท ุฃุนูุงูู. ุงูุชุจ ุงูุฅูุฌุงุฒุงุช ุจุงูุฃุฑูุงู.",
    r"(ููุช|ุถุญู)": random.choice([
        "ูุฑุฉ ูุงุญุฏ ุบุจู ูุชุญ ุจุงุจ ุงูุซูุงุฌุฉโฆ ููุง ุงูููุฑุ ูุงููุง: ูุง ุดุงุก ุงููู ุญุชู ุฃูุชู ููุฑููุฉ! ๐",
        "ูุงููุง ููุจุฎูู: ุนูุฏูู ุฒูุชุ ูุงููู: ูุงุ ูุงููุง: ูุงูุถูุ ูุงููู: ููุฌูุจูู ูู ุงูุดูุณ! ๐",
        "ูุงุญุฏ ุฑุงุญ ููุทุจูุจ ูุงูู: ูู ูุง ูุดุฑุจ ุดุงู ููุฌุน ุนููู! ูุงูู: ุฌุฑูุจ ุชุญูุฏ ุงูููุนูุฉ ูู ุงููุงุณ! ๐คญ",
    ]),
    r"(ุญููุฉ|ุงูุชุจุงุณ)": random.choice([
        "ูู ุฌุฏู ูุฌุฏุ ููู ุฒุฑุน ุญุตุฏ.",
        "ุงุจุฏุฃ ุญูุซ ุฃูุชุ ุงุณุชุนูู ูุง ูุฏููุ ูุงูุนู ูุง ุชุณุชุทูุน.",
        "ูุง ุชุฑูุฒ ุนููู ููุจุฑ โ ูุฑููุฒ ุนูู ุงูุญููู ูุง ุนูู ุงููุดุงูู.",
    ]),
    r"(ุงุฎุชุจุฑูู|quiz|ุงุฎุชุจุงุฑ).*ุงูุฌูู": "ุชุฑุฌู: โConsistent effort beats talent when talent doesnโt try.โ",
    r"(ุชูุฎูุต|ููุฎุต)": "ุฃุฑุณู ูุต ูุตูุฑ ูุฃูุง ููุฎุตูููู ูู ููุงุท ุจุณูุทุฉ ููุจุงุดุฑุฉ.",
}

def simple_reply(msg: str) -> str:
    text = msg.strip().lower()
    # ุชุฎุตูุต ุณุฑูุน
    if len(text) <= 2:
        return "ุงูุชุจูู ุณุคุงูู ุจุฃูุซุฑ ุชูุงุตูู ุดููุฉ ุจุงุด ูุฌุงูุจู ูููุญ ๐"
    # ููุฎุต ูุฏูู
    if text.startswith("ูุฎุต:") or "ูุฎุต" in text:
        body = re.sub(r"^ูุฎุต[:๏ผ]\s*", "", msg, flags=re.I)
        if not body.strip():
            return "ุงุจุนุซ ุงููุต ุจุนุฏ ูููุฉ (ูุฎุต:) ูุซุงู: ูุฎุต: [ุงููุต]"
        parts = [p.strip() for p in re.split(r"[\.!\n]", body) if p.strip()]
        bullets = "\n".join([f"โข {p}" for p in parts][:7]) or "โข ุงููุต ูุตูุฑ ุจุฒุงู ููุชูุฎูุต."
        return f"ุชูุฎูุต ุณุฑูุน:\n{bullets}"
    # ุจุญุซ ุฏุงุฎู ุงููุญุงุฏุซุฉ
    if text.startswith("ุงุจุญุซ:"):
        q = msg.split(":",1)[-1].strip()
        if not q:
            return "ุงูุชุจ: ุงุจุญุซ: [ูููุฉ/ุฌููุฉ]"
        rows = db_all()
        hits = [f"- ({r[2]}) {r[0]}: {r[1][:80]}..." for r in rows if q in r[1]]
        return "ูุชุงุฆุฌ ุฏุงุฎู ุงููุญุงุฏุซุฉ:\n" + ("\n".join(hits[:10]) if hits else "ูุง ุชูุฌุฏ ูุชุงุฆุฌ.")
    # ุฑุฏูุฏ ูู ุงููุงููุณ
    for pattern, answer in FAQ.items():
        if re.search(pattern, text):
            return answer
    # ุฑุฏ ุงูุชุฑุงุถู ุฐูู ุจุณูุท
    return (
        "ูููุช ุณุคุงูู โ\n"
        "ููุฏุฑ ููุชุฑุญ ุนููู ุฎุทุฉ ุฃู ุฎุทูุงุช ุนูููุฉ: ุงุฎุชุตุฑูู ุงููุทููุจ (ุงููุฏู/ุงููุฏุฉ/ุงููุณุชูู)ุ "
        "ููุนุทูู ุฌุฏูู ุฃู ููุงุท ุชูููุฐ ูุจุงุดุฑุฉ."
    )

# ============ ุนูุงุตุฑ ุงููุงุฌูุฉ ุงูุนูููุฉ ============
if "theme" not in st.session_state:
    st.session_state.theme = "ูุงุชุณุงุจ"

inject_css(st.session_state.theme)

colA, colB = st.columns([1,1])
with colA:
    st.markdown(
        f'<h1 class="title-hero">๐ฌ ุงูุจูุช ุงูุดุงุจ โ ุฏุฑุฏุดุฉ ุณุชุงูู ูุงุชุณุงุจ</h1>',
        unsafe_allow_html=True
    )
with colB:
    st.selectbox("๐จ ุงุฎุชุฑ ุงูุซูู", list(THEMES.keys()), key="theme", on_change=lambda: inject_css(st.session_state.theme))

st.markdown(
    '<p class="subtitle">ุงูุชุจ ุณุคุงูู ุฃู ุงุฎุชุฑ ูู ุงูุงูุชุฑุงุญุงุช ุงูุฌุงูุฒุฉ (ุฃูุซุฑ ูู 50 ููุฑุฉ) ๐</p>',
    unsafe_allow_html=True
)

# ============ ุฃุฏูุงุช ุณุฑูุนุฉ ============
tcol1, tcol2, tcol3, tcol4 = st.columns(4)
with tcol1:
    if st.button("๐งน ูุณุญ ุงููุญุงุฏุซุฉ", use_container_width=True):
        db_clear()
        st.experimental_rerun()
with tcol2:
    if st.button("๐พ ุชุตุฏูุฑ JSON", use_container_width=True):
        data = [{"role": r, "content": c, "ts": ts} for (r,c,ts) in db_all()]
        st.download_button("โฌ๏ธ ุญููู ุงููุญุงุฏุซุฉ", data=json.dumps(data, ensure_ascii=False, indent=2),
                           file_name="chat_export.json", mime="application/json", use_container_width=True)
with tcol3:
    st.write("")  # spacer
    st.markdown('<div class="tools"></div>', unsafe_allow_html=True)
with tcol4:
    st.write("")  # spacer

# ============ ุดุฑูุท ุงูุจุญุซ ุฏุงุฎู ุงููุญุงุฏุซุฉ ============
with st.expander("๐ ุจุญุซ ุฏุงุฎู ุงููุญุงุฏุซุฉ"):
    q = st.text_input("ุงูุชุจ ูููุฉ ููุจุญุซ:")
    if q:
        rows = db_all()
        hits = [f"- ({ts}) {role}: {content}" for (role, content, ts) in rows if q in content]
        st.write("\n".join(hits[:25]) if hits else "ูุง ุชูุฌุฏ ูุชุงุฆุฌ.")

# ============ ุงูุชุฑุงุญุงุช (50+) ============
st.markdown('<div class="chips-wrap">', unsafe_allow_html=True)
for s in SUGGESTIONS:
    st.markdown(f"""<span class="chip" onclick="window.parent.postMessage({{'type':'chip','text':{json.dumps(s)}}}, '*')">{s}</span>""",
                unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)

# JS ูุงูุชูุงุท ุถุบุทุงุช ุงูุดูุจุณ (ุงูุชุฑุงุญุงุช) + ูุงูู + TTS
st.components.v1.html(dedent(f"""
<script>
  // ุงุณุชูุจุงู ุถุบุทุงุช ุงูุงูุชุฑุงุญุงุช
  window.addEventListener("message", (e) => {{
    const data = e.data || {{}};
    if (data.type === "chip" && data.text) {{
      const inp = window.parent.document.querySelector('textarea');
      if (inp) {{
        inp.value = data.text;
        inp.dispatchEvent(new Event('input', {{ bubbles: true }}));
      }}
    }}
  }}, false);

  // ูุงุฌูุฉ ุตูุชูุฉ (ุฅููุงุก + ูุทู)
  window.ST_VOICE = {{
    speak: (txt) => {{
      try {{
        const u = new SpeechSynthesisUtterance(txt);
        u.lang = "ar";
        speechSynthesis.cancel();
        speechSynthesis.speak(u);
      }} catch(_) {{}}
    }},
    listen: () => {{
      try {{
        const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
        if (!SR) return "UNSUPPORTED";
        const r = new SR(); r.lang = "ar-DZ"; r.interimResults = false;
        r.onresult = (ev) => {{
          const t = ev.results[0][0].transcript;
          window.parent.postMessage({{type:"voice_text", text:t}}, "*");
        }};
        r.start();
        return "STARTED";
      }} catch(_) {{ return "ERROR"; }}
    }}
  }};
</script>
"""), height=0)

# ุฅุธูุงุฑ ุฃุฒุฑุงุฑ ูุงูู/ูุทู
cc1, cc2, cc3 = st.columns([1,1,2])
with cc1:
    start_voice = st.button("๐๏ธ ุฅููุงุก ุตูุชู")
with cc2:
    last_bot_to_say = st.session_state.get("last_bot", "")
    say_voice = st.button("๐ ูุทู ุขุฎุฑ ุฑุฏ")

voice_event = st.experimental_get_query_params().get("voice", None)

# ============ ุฅุฏุฎุงู ุงูุฑุณุงูุฉ ============
msg = st.text_area("โฆุงูุชุจ ุฑุณุงูุชู", height=72, label_visibility="collapsed", key="msg_box")
send = st.button("ุฅุฑุณุงู โ๏ธ", use_container_width=True)

# ุชูุนูู ุงูุฅููุงุก ุงูุตูุชู
if start_voice:
    st.components.v1.html("""
    <script>
      const s = (window.parent.ST_VOICE && window.parent.ST_VOICE.listen()) || "UNSUPPORTED";
      window.parent.postMessage({type:"voice_state", state:s}, "*");
    </script>
    """, height=0)

# ุงุณุชูุจุงู ูุต ุงููุงูู (hack ุจุณูุท)
st.components.v1.html("""
<script>
  window.addEventListener("message", (e) => {
    const d = e.data || {};
    if (d.type === "voice_text" && d.text){
      const inp = window.parent.document.querySelector('textarea');
      if (inp){
        inp.value = d.text;
        inp.dispatchEvent(new Event('input', { bubbles: true }));
      }
    }
  }, false);
</script>
""", height=0)

# ูุทู ุขุฎุฑ ุฑุฏ
if say_voice and last_bot_to_say:
    st.components.v1.html(f"""
    <script>
      if (window.parent.ST_VOICE) {{
        window.parent.ST_VOICE.speak({json.dumps(last_bot_to_say)});
      }}
    </script>
    """, height=0)

# ============ ููุทู ุงูุฅุฑุณุงู ============
def push_user(text):
    db_add("user", text)

def push_bot(text):
    db_add("bot", text)
    st.session_state["last_bot"] = text

if send and msg.strip():
    push_user(msg.strip())
    reply = simple_reply(msg)
    push_bot(reply)
    st.experimental_rerun()

# ============ ุนุฑุถ ุงููุญุงุฏุซุฉ (ุณุชุงูู ูุงุชุณุงุจ) ============
rows = db_all()
if not rows:
    # ุฑุณุงูุฉ ุชุฑุญูุจ ุฃูููุฉ
    welcome = "ุฃููุง ูุณููุง! ุฃูุง ุงูุจูุช ุงูุดุงุจ ๐ โ ุงุณูุณู ุนูู ุฃู ุญุงุฌุฉ: ุฎุทุฉุ ุชูุฎูุตุ ุฅูุชุงุฌูุฉุ ุฏุฑุงุณุฉุ ุฃู ุฏูุงุฆู ุถุญู.\nุฌุฑูุจ ูู ุงูุงูุชุฑุงุญุงุช ููู ุฃู ุงุจุนุซ ุณุคุงูู ูุจุงุดุฑุฉ."
    db_add("bot", welcome)
    rows = db_all()

for role, content, ts in rows:
    who = "bot" if role != "user" else "user"
    avatar_emoji = "๐ค" if who == "bot" else "๐งโ๐ป"
    time_str = datetime.fromisoformat(ts).strftime("%H:%M")
    col1, col2 = st.columns([1,9]) if who == "bot" else st.columns([9,1])

    if who == "bot":
        with col1: st.markdown(f'<div class="avatar">{avatar_emoji}</div>', unsafe_allow_html=True)
        with col2:
            st.markdown(f'<div class="bubble bot">{content}</div><div class="meta">ุงูุจูุช โข {time_str}</div>',
                        unsafe_allow_html=True)
    else:
        with col1:
            st.markdown(f'<div style="text-align:right;"><div class="bubble user">{content}</div><div class="meta">ุฃูุง โข {time_str}</div></div>',
                        unsafe_allow_html=True)
        with col2: st.markdown(f'<div class="avatar">{avatar_emoji}</div>', unsafe_allow_html=True)

st.markdown('<p class="footer-note">ูุง ุชุญุชุงุฌ ูุฃู ููุงุชูุญ API โ ูู ุดูุก ูุญูู ๐</p>', unsafe_allow_html=True)
